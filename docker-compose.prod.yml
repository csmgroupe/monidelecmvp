services:
  # Compliance Engine (Internal microservice)
  compliance-engine:
    build:
      context: ./compliance_engine
      dockerfile: Dockerfile
    container_name: abconcept_compliance_engine_prod
    restart: unless-stopped
    environment:
      PYTHONUNBUFFERED: 1
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    # No ports exposed - internal service only

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: abconcept_backend_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      COMPLIANCE_ENGINE_URL: http://compliance-engine:8000
      # URLs configuration
      FRONTEND_URL: ${FRONTEND_URL:-https://app.mon-idelec.fr}
      BASE_URL: ${BASE_URL:-https://app.mon-idelec.fr}
    ports:
      - "3000:3000"
    networks:
      - app-network
    volumes:
      - ./backend/uploads:/app/uploads
    depends_on:
      compliance-engine:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/v1 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        VITE_APP_URL: ${FRONTEND_URL:-https://app.mon-idelec.fr}
    container_name: abconcept_frontend_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    environment:
      - NGINX_HOST=${DOMAIN_NAME:-localhost}
      - NGINX_PORT=80
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: abconcept_certbot_prod
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${SSL_EMAIL} -d ${DOMAIN_NAME} --agree-tos --non-interactive
    depends_on:
      - frontend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge 